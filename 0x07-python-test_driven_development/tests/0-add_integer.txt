# 0-add_integer.txt

===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)`` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2, -10)
    -8

The function also works with floating-point values.

::

    >>> add_integer(8.0, 3.1)
    11

Note that floats are casted to ints before addition is performed.

::

    >>> add_integer(8.9, 0.5)
    8

::

    >>> add_integer(-7.9, -0.2)
    -7

Floating and non-floating point values can be combined.

::

    >>> add_integer(2.3, -4)
    -2

The second argument is optional - by default, it is 98.

::

    >>> add_integer(2)
    100

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("Blues", 2)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(5, "Whiteman")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.4, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "winner")
    Traceback (most recent call last):
    TypeError: a must be an integer

If any argument or both arguments are provided as infinity, an OverflowError
message is printed

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(6, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(float('inf'), float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

If arguments are NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
