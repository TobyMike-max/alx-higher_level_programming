# 1-my_list.txt

=======================
How to use 1-my_list.py
=======================

This module defines a class ``Mylist`` that inherits from ``list``.

Instantiation
=============

``MyList`` can be instantiated with no arguments, which will return an
empty list:

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::

    >>> print(my_list)
    []

Or a single argument, whic must be an iterable object.

::

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable

A ``TypeError`` will be raised for any more than one instantiation arguments.

::

    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    TypeError: list expected at most 1 argument, got 2

Usage
=====

``MyList`` is an inherited ``list`` class and thus features the same methods.
For instance, elements can be added to  a ``MyList`` wit the ``append()`` metod.

::

    >>> my_list = MyList()
    >>> my_list.append(3)
    >>> my_list.append(6)
    >>> my_list.append(9)
    >>> print(my_list)
    [3, 6, 9]

::

    >>> my_list[0] = 1
    >>> print(my_list)
    [1, 6, 9]

And the ``remove()`` method.

::

    >>> my_list.remove(9)
    >>> print(my_list)
    [1, 6]

See the documentation on Python lists for more builtin methods or
type ``dir(list)`` on any Python interpreter to see available methods.

``print_sorted`` Method
=======================

``MyList`` implements a single method - a public instance method
``print_sorted(self)``

::

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

The method prints the list in ascending sorted order.

::

    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

::

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

The order of the original list is not altered after a call to the method.

::

    >>> print(my_list)
    [1, 4, 2, 3, 5]

List of strings are sorted lexographically.

::

    >>> my_list = MyList()
    >>> my_list.append("He")
    >>> my_list.append("Is a")
    >>> my_list.append("Cool")
    >>> my_list.append("Boy")
    >>> print(my_list)
    ['He', 'Is a', 'Cool', 'Boy']

::

    >>> my_list.print_sorted()
    ['Boy', 'Cool', 'He', 'Is a']

Nothing to sort with empty lists.

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

If ``print_sorted(...)`` is called on a list of different types, a TypeError
will be raised.

::

    >>> my_list = MyList([1, 'Betty', 'PyCode', 7])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'str' and 'int'
